{"version":3,"sources":["components/input/TextArea.tsx","page/AddBook/index.tsx"],"names":["TextArea","Input","InputText","props","name","value","placeholder","error","minRows","maxRows","label","styleProp","onChange","onBlur","id","className","cn","status","text","autoSize","style","initFormData","author","description","AddBook","t","useTranslation","dispatch","useDispatch","React","useState","buttonDisabled","setButtonDisabled","formaData","setFormData","setError","handleChange","useCallback","event","target","prev","handleBlur","handleSubmit","preventDefault","Object","entries","reduce","acc","key","Actions","requestAddBook","setTimeout","isButtonDisabled","useMemo","values","some","item","onSubmit","width","type","htmlType","disabled"],"mappings":"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","file":"static/js/5.a879ae17.chunk.js","sourcesContent":["import './Style.scss';\r\nimport React from 'react';\r\nimport { Input } from 'antd';\r\nimport cn from 'classnames';\r\n\r\nconst { TextArea } = Input;\r\n\r\ntype Props = {\r\n  name: string;\r\n  value?: any;\r\n  error?: any;\r\n  placeholder?: string;\r\n  minRows?: number;\r\n  maxRows?: number;\r\n  label?: string;\r\n  styleProp?: any;\r\n  onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\r\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\r\n};\r\n\r\nconst InputText = (props: Props) => {\r\n  const { name, value, placeholder, error, minRows = 1, maxRows = 1, label, styleProp, onChange, onBlur } = props;\r\n  return (\r\n    <>\r\n      <label\r\n        id={name}\r\n        className={cn('input__label', {\r\n          'input__label-error': error[name].status,\r\n        })}\r\n      >\r\n        {error[name].status ? error[name].text : label}\r\n      </label>\r\n      <TextArea\r\n        id={name}\r\n        name={name}\r\n        value={value[name]}\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n        autoSize={{ minRows, maxRows }}\r\n        onBlur={onBlur}\r\n        style={styleProp}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputText;\r\n","import './AddBook.scss';\r\nimport React from 'react';\r\nimport { Button } from 'antd';\r\nimport TextArea from 'components/input/TextArea';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Actions } from 'redux/action/books';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { FormDataErrorType } from 'types';\r\n\r\nconst initFormData = { name: '', author: '', description: '' };\r\n\r\nconst AddBook = () => {\r\n  const { t } = useTranslation();\r\n  const dispatch = useDispatch();\r\n  const [buttonDisabled, setButtonDisabled] = React.useState(false);\r\n  const [formaData, setFormData] = React.useState(initFormData);\r\n  const [error, setError] = React.useState<FormDataErrorType>({\r\n    name: { status: false, text: '' },\r\n    author: { status: false, text: '' },\r\n    description: { status: false, text: '' },\r\n  });\r\n\r\n  const handleChange = React.useCallback(\r\n    (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n      const { name, value } = event.target;\r\n      if (error[name].status === true) {\r\n        setError((prev) => ({ ...prev, [name]: { status: false, text: '' } }));\r\n      }\r\n      setFormData((prev) => ({ ...prev, [name]: value }));\r\n    },\r\n    [error],\r\n  );\r\n\r\n  const handleBlur = React.useCallback(\r\n    (event: React.FocusEvent<HTMLTextAreaElement>) => {\r\n      const { name, value } = event.target;\r\n      setError((prev) => ({\r\n        ...prev,\r\n        [name]: { status: !value, text: !value ? t('errors.required') : '' },\r\n      }));\r\n    },\r\n    [t],\r\n  );\r\n\r\n  const handleSubmit = React.useCallback(\r\n    (event: React.FormEvent) => {\r\n      event.preventDefault();\r\n      const checkFillingInput = Object.entries(formaData).reduce((acc, [key, value]) => {\r\n        if (!value) {\r\n          setError((prev) => ({\r\n            ...prev,\r\n            [key]: { status: true, text: t('errors.required') },\r\n          }));\r\n          return true;\r\n        }\r\n        return acc;\r\n      }, false);\r\n      if (checkFillingInput) {\r\n        return;\r\n      }\r\n      dispatch(Actions.requestAddBook(formaData));\r\n      setButtonDisabled(true);\r\n      setTimeout(() => {\r\n        setButtonDisabled(false);\r\n        setFormData(initFormData);\r\n      }, 2000);\r\n    },\r\n    [formaData, dispatch, t],\r\n  );\r\n\r\n  const isButtonDisabled = React.useMemo(\r\n    () => Object.values(error).some((item) => item.status === true) || buttonDisabled,\r\n    [error, buttonDisabled],\r\n  );\r\n\r\n  return (\r\n    <div className=\"addbook\">\r\n      <div className=\"container\">\r\n        <div className=\"addbook-wrap\">\r\n          <form className=\"addbook__form\" onSubmit={handleSubmit}>\r\n            <TextArea\r\n              name=\"name\"\r\n              value={formaData}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              label={t('book.input.name')}\r\n              placeholder={t('book.input.name')}\r\n              error={error}\r\n              styleProp={{ width: '500px' }}\r\n            />\r\n            <TextArea\r\n              name=\"author\"\r\n              value={formaData}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              label={t('book.input.author')}\r\n              placeholder={t('book.input.author')}\r\n              error={error}\r\n              styleProp={{ width: '500px' }}\r\n            />\r\n            <TextArea\r\n              name=\"description\"\r\n              value={formaData}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              label={t('book.input.description')}\r\n              placeholder={t('book.input.description')}\r\n              error={error}\r\n              minRows={3}\r\n              maxRows={7}\r\n              styleProp={{ width: '500px' }}\r\n            />\r\n            <div className=\"addbook__btn\">\r\n              <Button type=\"primary\" htmlType=\"submit\" disabled={isButtonDisabled}>\r\n                {t('global.save')}\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddBook;\r\n"],"sourceRoot":""}