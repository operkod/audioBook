{"version":3,"sources":["components/input/FieldAuth.tsx","helpers/validators.ts","page/Signup/index.tsx"],"names":["FormField","props","name","placeholder","type","handleChange","handleBlur","errors","values","Item","validateStatus","status","undefined","help","text","hasFeedback","id","size","value","onChange","onBlur","emailValidator","email","test","RegisterForm","t","useTranslation","dispatch","useDispatch","isLoading","useSelector","getAuthLoading","React","useState","fullname","password","password_2","formaData","setFormData","error","setError","useCallback","event","target","prev","isValidEmail","passwordEquality","isButtonDisabled","useMemo","Object","some","item","handleSubmit","preventDefault","entries","reduce","acc","key","Actions","fetchRegistration","className","onSubmit","disabled","block","htmlType","to","routers","getSignin"],"mappings":"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","file":"static/js/7.0ed46532.chunk.js","sourcesContent":["import { Form, Input } from 'antd';\r\nimport React, { ChangeEvent, FocusEvent } from 'react';\r\n\r\ntype PropsType = {\r\n  name: string;\r\n  placeholder: string;\r\n  type: string;\r\n  handleChange: (event: ChangeEvent<HTMLInputElement>) => void;\r\n  handleBlur: (event: FocusEvent<HTMLInputElement>) => void;\r\n  errors: any;\r\n  values: any;\r\n};\r\n\r\nconst FormField = (props: PropsType) => {\r\n  const { name, placeholder, type, handleChange, handleBlur, errors, values } = props;\r\n  return (\r\n    <Form.Item\r\n      validateStatus={errors[name].status ? 'error' : undefined}\r\n      help={errors[name].status ? errors[name].text : undefined}\r\n      hasFeedback\r\n    >\r\n      <Input\r\n        id={name}\r\n        name={name}\r\n        size=\"large\"\r\n        placeholder={placeholder}\r\n        value={values[name]}\r\n        onChange={handleChange}\r\n        onBlur={handleBlur}\r\n        type={type}\r\n      />\r\n    </Form.Item>\r\n  );\r\n};\r\nexport default FormField;\r\n","export const emailValidator = (email: string) => {\r\n  // eslint-disable-next-line no-useless-escape\r\n  const reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/;\r\n  return reg.test(email);\r\n};\r\n\r\nexport const phoneValidator = (phone: string) => {\r\n  // eslint-disable-next-line no-useless-escape\r\n  const reg = /^((8|\\+7)[\\- ]?)?(\\(?\\d{3}\\)?[\\- ]?)?[\\d\\- ]{7,10}$/;\r\n  return reg.test(phone);\r\n};\r\n","import './Auth.scss';\r\nimport React from 'react';\r\nimport { Form, Button } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport FormField from 'components/input/FieldAuth';\r\nimport { FormDataErrorType, RegistrationFormType } from 'types';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAuthLoading } from 'redux/selectors';\r\nimport { emailValidator } from 'helpers/validators';\r\nimport Actions from 'redux/action/user';\r\nimport routers from 'const/routers';\r\n\r\nconst RegisterForm = () => {\r\n  const { t } = useTranslation();\r\n\r\n  const dispatch = useDispatch();\r\n  const isLoading = useSelector(getAuthLoading);\r\n  const [formaData, setFormData] = React.useState<RegistrationFormType>({\r\n    email: '',\r\n    fullname: '',\r\n    password: '',\r\n    password_2: '',\r\n  });\r\n  const [error, setError] = React.useState<FormDataErrorType>({\r\n    email: { status: false, text: '' },\r\n    fullname: { status: false, text: '' },\r\n    password: { status: false, text: '' },\r\n    password_2: { status: false, text: '' },\r\n  });\r\n\r\n  const handleChange = React.useCallback(\r\n    (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      const { name, value } = event.target;\r\n      if (error[name].status === true) {\r\n        setError((prev) => ({ ...prev, [name]: { status: false, text: '' } }));\r\n      }\r\n      setFormData((prev) => ({ ...prev, [name]: value }));\r\n    },\r\n    [error],\r\n  );\r\n\r\n  const handleBlur = React.useCallback(\r\n    (event: React.FocusEvent<HTMLInputElement>) => {\r\n      const { name, value } = event.target;\r\n      if (name === 'email' && value) {\r\n        const isValidEmail = !emailValidator(value);\r\n        setError((prev) => ({\r\n          ...prev,\r\n          [name]: {\r\n            status: isValidEmail,\r\n            text: isValidEmail ? t('errors.emailNotValid') : '',\r\n          },\r\n        }));\r\n      } else if (name === 'password_2' && value) {\r\n        const passwordEquality = formaData.password !== value;\r\n        setError((prev) => ({\r\n          ...prev,\r\n          [name]: {\r\n            status: passwordEquality,\r\n            text: passwordEquality ? t('errors.passwordsEquality') : '',\r\n          },\r\n        }));\r\n      } else if (name === 'password' && formaData.password_2 && value) {\r\n        const passwordEquality = formaData.password !== formaData.password_2;\r\n        setError((prev) => ({\r\n          ...prev,\r\n          password_2: {\r\n            status: passwordEquality,\r\n            text: passwordEquality ? t('errors.passwordsEquality') : '',\r\n          },\r\n        }));\r\n      } else {\r\n        setError((prev) => ({\r\n          ...prev,\r\n          [name]: { status: !value, text: !value ? t('errors.required') : '' },\r\n        }));\r\n      }\r\n    },\r\n    [t, formaData],\r\n  );\r\n\r\n  const isButtonDisabled = React.useMemo(\r\n    () => Object.values(error).some((item) => item.status === true) || isLoading,\r\n    [error, isLoading],\r\n  );\r\n\r\n  const handleSubmit = React.useCallback(\r\n    (event: React.FormEvent) => {\r\n      event.preventDefault();\r\n      const checkFillingInput = Object.entries(formaData).reduce((acc, [key, value]) => {\r\n        if (!value) {\r\n          setError((prev) => ({\r\n            ...prev,\r\n            [key]: { status: true, text: t('errors.required') },\r\n          }));\r\n          return true;\r\n        }\r\n        return acc;\r\n      }, false);\r\n      if (checkFillingInput) {\r\n        return;\r\n      }\r\n      dispatch(Actions.fetchRegistration(formaData));\r\n    },\r\n    [t, formaData, dispatch],\r\n  );\r\n\r\n  return (\r\n    <section className=\"auth\">\r\n      <div className=\"auth__content\">\r\n        <div className=\"auth__top\">\r\n          <h2>{t('auth.headerRegistration.title')}</h2>\r\n          <p>{t('auth.headerRegistration.subtitle')}</p>\r\n        </div>\r\n        <div>\r\n          <form onSubmit={handleSubmit} className=\"login-form\">\r\n            <FormField\r\n              name=\"email\"\r\n              type=\"text\"\r\n              placeholder={t('auth.input.email')}\r\n              handleChange={handleChange}\r\n              handleBlur={handleBlur}\r\n              errors={error}\r\n              values={formaData}\r\n            />\r\n            <FormField\r\n              name=\"fullname\"\r\n              type=\"text\"\r\n              placeholder={t('auth.input.fullName')}\r\n              handleChange={handleChange}\r\n              handleBlur={handleBlur}\r\n              errors={error}\r\n              values={formaData}\r\n            />\r\n\r\n            <FormField\r\n              name=\"password\"\r\n              placeholder={t('auth.input.password')}\r\n              type=\"password\"\r\n              handleChange={handleChange}\r\n              handleBlur={handleBlur}\r\n              errors={error}\r\n              values={formaData}\r\n            />\r\n            <FormField\r\n              name=\"password_2\"\r\n              placeholder={t('auth.input.password')}\r\n              type=\"password\"\r\n              handleChange={handleChange}\r\n              handleBlur={handleBlur}\r\n              errors={error}\r\n              values={formaData}\r\n            />\r\n            <Form.Item>\r\n              <Button\r\n                disabled={isButtonDisabled}\r\n                block\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                onSubmit={handleSubmit}\r\n                size=\"large\"\r\n              >\r\n                {t('auth.button.registration')}\r\n              </Button>\r\n            </Form.Item>\r\n            <Link className=\"auth__register-link\" to={routers.getSignin()}>\r\n              {t('auth.button.signIn')}\r\n            </Link>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n"],"sourceRoot":""}