{"version":3,"sources":["components/input/FieldAuth.tsx","helpers/validators.ts","page/Signin/index.tsx"],"names":["FormField","props","name","placeholder","type","handleChange","handleBlur","errors","values","Item","validateStatus","status","undefined","help","text","hasFeedback","id","size","value","onChange","onBlur","emailValidator","email","test","LoginForm","dispatch","useDispatch","isLoading","useSelector","getAuthLoading","t","useTranslation","React","useState","password","formaData","setFormData","error","setError","useCallback","event","target","prev","isValidEmail","isButtonDisabled","useMemo","Object","some","item","handleSubmit","preventDefault","entries","reduce","acc","key","Actions","fetchAuthorization","className","onSubmit","disabled","block","htmlType","to","routers","getSignup"],"mappings":"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","file":"static/js/6.391a69f8.chunk.js","sourcesContent":["import { Form, Input } from 'antd';\r\nimport React, { ChangeEvent, FocusEvent } from 'react';\r\n\r\ntype PropsType = {\r\n  name: string;\r\n  placeholder: string;\r\n  type: string;\r\n  handleChange: (event: ChangeEvent<HTMLInputElement>) => void;\r\n  handleBlur: (event: FocusEvent<HTMLInputElement>) => void;\r\n  errors: any;\r\n  values: any;\r\n};\r\n\r\nconst FormField = (props: PropsType) => {\r\n  const { name, placeholder, type, handleChange, handleBlur, errors, values } = props;\r\n  return (\r\n    <Form.Item\r\n      validateStatus={errors[name].status ? 'error' : undefined}\r\n      help={errors[name].status ? errors[name].text : undefined}\r\n      hasFeedback\r\n    >\r\n      <Input\r\n        id={name}\r\n        name={name}\r\n        size=\"large\"\r\n        placeholder={placeholder}\r\n        value={values[name]}\r\n        onChange={handleChange}\r\n        onBlur={handleBlur}\r\n        type={type}\r\n      />\r\n    </Form.Item>\r\n  );\r\n};\r\nexport default FormField;\r\n","export const emailValidator = (email: string) => {\r\n  // eslint-disable-next-line no-useless-escape\r\n  const reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/;\r\n  return reg.test(email);\r\n};\r\n\r\nexport const phoneValidator = (phone: string) => {\r\n  // eslint-disable-next-line no-useless-escape\r\n  const reg = /^((8|\\+7)[\\- ]?)?(\\(?\\d{3}\\)?[\\- ]?)?[\\d\\- ]{7,10}$/;\r\n  return reg.test(phone);\r\n};\r\n","import './Auth.scss';\r\nimport React from 'react';\r\nimport { Form, Button } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport Input from 'components/input/FieldAuth';\r\nimport { FormDataErrorType, LoginFormType } from 'types';\r\nimport { useTranslation } from 'react-i18next';\r\nimport routers from 'const/routers';\r\nimport { emailValidator } from 'helpers/validators';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAuthLoading } from 'redux/selectors';\r\nimport Actions from 'redux/action/user';\r\n\r\nconst LoginForm = () => {\r\n  const dispatch = useDispatch();\r\n  const isLoading = useSelector(getAuthLoading);\r\n  const { t } = useTranslation();\r\n  const [formaData, setFormData] = React.useState<LoginFormType>({\r\n    email: '',\r\n    password: '',\r\n  });\r\n  const [error, setError] = React.useState<FormDataErrorType>({\r\n    email: { status: false, text: '' },\r\n    password: { status: false, text: '' },\r\n  });\r\n\r\n  const handleChange = React.useCallback(\r\n    (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      const { name, value } = event.target;\r\n      if (error[name].status === true) {\r\n        setError((prev) => ({ ...prev, [name]: { status: false, text: '' } }));\r\n      }\r\n      setFormData((prev) => ({ ...prev, [name]: value }));\r\n    },\r\n    [error],\r\n  );\r\n\r\n  const handleBlur = React.useCallback(\r\n    (event: React.FocusEvent<HTMLInputElement>) => {\r\n      const { name, value } = event.target;\r\n      if (name === 'email' && value) {\r\n        const isValidEmail = !emailValidator(value);\r\n        setError((prev) => ({\r\n          ...prev,\r\n          [name]: {\r\n            status: isValidEmail,\r\n            text: isValidEmail ? t('errors.emailNotValid') : '',\r\n          },\r\n        }));\r\n      } else {\r\n        setError((prev) => ({\r\n          ...prev,\r\n          [name]: { status: !value, text: !value ? t('errors.required') : '' },\r\n        }));\r\n      }\r\n    },\r\n    [t],\r\n  );\r\n\r\n  const isButtonDisabled = React.useMemo(\r\n    () => Object.values(error).some((item) => item.status === true) || isLoading,\r\n    [error, isLoading],\r\n  );\r\n\r\n  const handleSubmit = React.useCallback(\r\n    (event: React.FormEvent) => {\r\n      event.preventDefault();\r\n      const checkFillingInput = Object.entries(formaData).reduce((acc, [key, value]) => {\r\n        if (!value) {\r\n          setError((prev) => ({\r\n            ...prev,\r\n            [key]: { status: true, text: t('errors.required') },\r\n          }));\r\n          return true;\r\n        }\r\n        return acc;\r\n      }, false);\r\n      if (checkFillingInput) {\r\n        return;\r\n      }\r\n      dispatch(Actions.fetchAuthorization(formaData));\r\n    },\r\n    [t, formaData, dispatch],\r\n  );\r\n\r\n  return (\r\n    <section className=\"auth\">\r\n      <div className=\"auth__content\">\r\n        <div className=\"auth__top\">\r\n          <h2>{t('auth.headerAuthentication.title')}</h2>\r\n          <p>{t('auth.headerAuthentication.subtitle')}</p>\r\n        </div>\r\n        <div>\r\n          <form onSubmit={handleSubmit} className=\"login-form\">\r\n            <Input\r\n              name=\"email\"\r\n              type=\"text\"\r\n              placeholder={t('auth.input.email')}\r\n              handleChange={handleChange}\r\n              handleBlur={handleBlur}\r\n              errors={error}\r\n              values={formaData}\r\n            />\r\n            <Input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              placeholder={t('auth.input.password')}\r\n              handleChange={handleChange}\r\n              handleBlur={handleBlur}\r\n              errors={error}\r\n              values={formaData}\r\n            />\r\n            <Form.Item>\r\n              <Button disabled={isButtonDisabled} block htmlType=\"submit\" type=\"primary\" size=\"large\">\r\n                {t('auth.button.signIn')}\r\n              </Button>\r\n            </Form.Item>\r\n            <Link className=\"auth__register-link\" to={routers.getSignup()}>\r\n              {t('auth.button.registration')}\r\n            </Link>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n"],"sourceRoot":""}